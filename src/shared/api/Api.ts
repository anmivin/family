/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTasksForUser"];
        put?: never;
        post: operations["TasksController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTask"];
        put?: never;
        post?: never;
        delete: operations["TasksController_deleteTask"];
        options?: never;
        head?: never;
        patch: operations["TasksController_completeTask"];
        trace?: never;
    };
    "/tasks/for_approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTasksForApproval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/users/clearInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UsersController_clearData"];
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user info */
        get: operations["AuthController_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log In */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign Up */
        post: operations["AuthController_signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log In */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/abilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getUserAbilitie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getUserLists"];
        put?: never;
        post: operations["ListsController_createList"];
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ListsController_editList"];
        trace?: never;
    };
    "/lists/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getListsByType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characteristics/features/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CharacteristicsController_getFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characteristics/skills/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CharacteristicsController_getUserSkills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characteristics/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CharacteristicsController_getSkills"];
        put?: never;
        post: operations["CharacteristicsController_createSkill"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characteristics/skill/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CharacteristicsController_findSkill"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/characteristics/skills/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CharacteristicsController_deleteSkill"];
        options?: never;
        head?: never;
        patch: operations["CharacteristicsController_editSkill"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        TaskType: TaskType;
        /** @enum {string} */
        TaskStatus: TaskStatus;
        CreatorDto: {
            id: string;
            name: string;
        };
        OutputTaskDto: {
            id: string;
            title: string;
            status: components["schemas"]["TaskStatus"];
            /** Format: date-time */
            deadline?: string;
            type: components["schemas"]["TaskType"];
            creator?: components["schemas"]["CreatorDto"];
        };
        OutputTaskListDto: {
            total: number;
            items: components["schemas"]["OutputTaskDto"][];
        };
        /** @enum {string} */
        Difficulty: Difficulty;
        OutputTaskItemDto: {
            id: string;
            title: string;
            status: components["schemas"]["TaskStatus"];
            /** Format: date-time */
            deadline?: string;
            type: components["schemas"]["TaskType"];
            creator?: components["schemas"]["CreatorDto"];
            description?: string;
            difficulty: components["schemas"]["Difficulty"];
            isImportant?: boolean;
        };
        /** @enum {string} */
        RepeatPeriod: RepeatPeriod;
        /** @enum {string} */
        DayOfWeek: DayOfWeek;
        RepeatDto: {
            period?: components["schemas"]["RepeatPeriod"];
            interval?: number;
            day?: components["schemas"]["DayOfWeek"];
        };
        PercentDto: {
            id: string;
            percent: number;
        };
        /** @description Создание задачи */
        InputCreateTaskDto: {
            title: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            asigneeId?: string;
            creatorId?: string;
            difficulty?: components["schemas"]["Difficulty"];
            repeat?: components["schemas"]["RepeatDto"];
            type: components["schemas"]["TaskType"];
            isImportant?: boolean;
            skills: components["schemas"]["PercentDto"][];
            features: components["schemas"]["PercentDto"][];
        };
        OutputCreateTaskDto: {
            id: string;
        };
        /** @description Редактирование задачи */
        InputEditTaskDto: {
            title?: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            asigneeId?: string;
            creatorId?: string;
            difficulty?: components["schemas"]["Difficulty"];
            repeat?: components["schemas"]["RepeatDto"];
            type?: components["schemas"]["TaskType"];
            isImportant?: boolean;
            skills?: components["schemas"]["PercentDto"][];
            features?: components["schemas"]["PercentDto"][];
            id: string;
            status?: components["schemas"]["TaskStatus"];
        };
        /** @enum {string} */
        Role: Role;
        EditUserDto: {
            name?: string;
            email?: string;
            password?: string;
            familyid?: string;
            role?: components["schemas"]["Role"];
        };
        LevelDto: {
            name: string;
            level: number;
            url?: string;
        };
        OutputUserDto: {
            id: string;
            name: string;
            email?: string;
            xp: number;
            gold: number;
            familyId: string;
            level: components["schemas"]["LevelDto"];
        };
        LoginInputDto: {
            name: string;
            password: string;
        };
        CreateUserDto: {
            name: string;
            email?: string;
            password: string;
            familyid?: string;
            role?: components["schemas"]["Role"];
        };
        /** @enum {string} */
        Abilities: Abilities;
        UserAbilityDto: {
            create: components["schemas"]["Abilities"][];
            read: components["schemas"]["Abilities"][];
            update: components["schemas"]["Abilities"][];
            delete: components["schemas"]["Abilities"][];
        };
        OutputListsDto: {
            title: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            id: string;
        };
        ListItemDto: {
            id: string;
            title: string;
            description?: string;
            isCompleted: boolean;
        };
        OutputListDto: {
            title: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            listItems: components["schemas"]["ListItemDto"][];
        };
        CreateListDto: {
            title: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            listItems: components["schemas"]["ListItemDto"][];
        };
        EditListDto: {
            title?: string;
            description?: string;
            /** Format: date-time */
            deadline?: string;
            listItems?: components["schemas"]["ListItemDto"][];
            id: string;
        };
        FeatureBaseDto: {
            id: string;
            name: string;
            description: string;
            parentBrunchId: string;
            userXp: number;
        };
        FeatureDto: {
            id: string;
            name: string;
            description: string;
            userXp: number;
            children: components["schemas"]["FeatureBaseDto"][];
        };
        SkillXpDto: {
            id: string;
            name: string;
            xp: number;
        };
        SkillListDto: {
            id: string;
            name: string;
        };
        OutputSkillDto: {
            name: string;
            description?: string;
            features: components["schemas"]["PercentDto"][];
            id: string;
        };
        CreateSkillDto: {
            name: string;
            description?: string;
            features: components["schemas"]["PercentDto"][];
        };
        EditSkillDto: {
            name?: string;
            description?: string;
            features?: components["schemas"]["PercentDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    TasksController_findTasksForUser: {
        parameters: {
            query: {
                dateTo: string;
                dateFrom: string;
                offset: number;
                limit: number;
                type?: components["schemas"]["TaskType"];
                status?: components["schemas"]["TaskStatus"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskListDto"];
                };
            };
        };
    };
    TasksController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputCreateTaskDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputCreateTaskDto"];
                };
            };
        };
    };
    TasksController_findTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskItemDto"];
                };
            };
        };
    };
    TasksController_deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_completeTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputEditTaskDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_findTasksForApproval: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskDto"][];
                };
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_clearData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputUserDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginInputDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListsController_getUserAbilitie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAbilityDto"];
                };
            };
        };
    };
    ListsController_getUserLists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputListsDto"][];
                };
            };
        };
    };
    ListsController_createList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateListDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListsController_editList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditListDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListsController_getListsByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputListDto"];
                };
            };
        };
    };
    CharacteristicsController_getFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureDto"][];
                };
            };
        };
    };
    CharacteristicsController_getUserSkills: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillXpDto"][];
                };
            };
        };
    };
    CharacteristicsController_getSkills: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillListDto"][];
                };
            };
        };
    };
    CharacteristicsController_createSkill: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSkillDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CharacteristicsController_findSkill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputSkillDto"];
                };
            };
        };
    };
    CharacteristicsController_deleteSkill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CharacteristicsController_editSkill: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditSkillDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum TaskType {
    TODO = "TODO",
    HABIT = "HABIT",
    SMALL = "SMALL"
}
export enum TaskStatus {
    PENDING = "PENDING",
    IN_PROGRESS = "IN_PROGRESS",
    REJECTED = "REJECTED",
    COMPLETED = "COMPLETED",
    ABANDONED = "ABANDONED"
}
export enum Difficulty {
    SMALL = "SMALL",
    EASY = "EASY",
    MEDIUM = "MEDIUM",
    HARD = "HARD",
    EPIC = "EPIC",
    LEGENDARY = "LEGENDARY"
}
export enum RepeatPeriod {
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    MONTHLY = "MONTHLY",
    YEARLY = "YEARLY"
}
export enum DayOfWeek {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
export enum Role {
    ADMIN = "ADMIN",
    MEMBER = "MEMBER"
}
export enum Abilities {
    ASSIGN_TASK = "ASSIGN_TASK",
    CREATE_SKILL = "CREATE_SKILL"
}
