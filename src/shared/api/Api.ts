/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTasksForUser"];
        put?: never;
        post: operations["TasksController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTask"];
        put?: never;
        post?: never;
        delete: operations["TasksController_deleteTask"];
        options?: never;
        head?: never;
        patch: operations["TasksController_completeTask"];
        trace?: never;
    };
    "/tasks/for_approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TasksController_findTasksForApproval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/updateStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["TasksController_updateTaskStatus"];
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user info */
        get: operations["AuthController_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log In */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign Up */
        post: operations["AuthController_signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/features/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getFeatures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/skills/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getUserSkills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getSkills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/abilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ListsController_getUserAbilitie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OutputTaskListDto: {
            id: string;
            name: string;
            description?: string;
            isActive?: boolean;
            isCompleted?: boolean;
            isApproving?: boolean;
            isDeclined?: boolean;
            isHabit?: boolean;
            /** Format: date-time */
            date: string;
            creatorId?: string;
        };
        CreatorDto: {
            id: string;
            name: string;
        };
        OutputTaskDto: {
            id: string;
            name: string;
            description?: string;
            isActive?: boolean;
            isCompleted?: boolean;
            isApproving?: boolean;
            isDeclined?: boolean;
            isHabit?: boolean;
            /** Format: date-time */
            date: string;
            creatorId?: string;
            /** @enum {string} */
            difficulty: "Easy" | "Medium" | "Hard" | "Epic" | "Legendary";
            creator?: components["schemas"]["CreatorDto"];
        };
        PercentDto: {
            id: string;
            percent: number;
        };
        /** @description кокойто дискрипшен */
        InputCreateTaskDto: {
            name: string;
            /** @enum {string} */
            difficulty?: "Easy" | "Medium" | "Hard" | "Epic" | "Legendary";
            asigneeId?: string;
            description?: string;
            isHabit: boolean;
            /** Format: date-time */
            date?: string;
            skills: components["schemas"]["PercentDto"][];
            features: components["schemas"]["PercentDto"][];
        };
        OutputCreateTaskDto: {
            id: string;
        };
        InputEditTaskDto: {
            name?: string;
            /** @enum {string} */
            difficulty?: "Easy" | "Medium" | "Hard" | "Epic" | "Legendary";
            asigneeId?: string;
            description?: string;
            isHabit?: boolean;
            /** Format: date-time */
            date?: string;
            skills?: components["schemas"]["PercentDto"][];
            features?: components["schemas"]["PercentDto"][];
            id: string;
            isActive?: boolean;
            isCompleted?: boolean;
            isApproving?: boolean;
            isDeclined?: boolean;
        };
        EditUserDto: {
            name?: string;
            email?: string;
            password?: string;
            familyid?: string;
            role?: string;
        };
        OutputUserDto: {
            id: string;
            name: string;
            email?: string;
            xp: number;
            gold: number;
            familyId: string;
        };
        LoginInputDto: {
            name: string;
            password: string;
        };
        CreateUserDto: {
            name: string;
            email?: string;
            password: string;
            familyid?: string;
            role?: string;
        };
        FeatureBaseDto: {
            id: string;
            name: string;
            description: string;
            parentBrunchId: string;
            userXp: number;
        };
        FeatureDto: {
            id: string;
            name: string;
            description: string;
            userXp: number;
            children: components["schemas"]["FeatureBaseDto"][];
            color: string;
        };
        SkillXpDto: {
            id: string;
            name: string;
            xp: number;
        };
        SkillListDto: {
            id: string;
            name: string;
        };
        UserAbilityDto: {
            create: ("ASSIGN_TASK" | "CREATE_SKILL")[];
            read: ("ASSIGN_TASK" | "CREATE_SKILL")[];
            update: ("ASSIGN_TASK" | "CREATE_SKILL")[];
            delete: ("ASSIGN_TASK" | "CREATE_SKILL")[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    TasksController_findTasksForUser: {
        parameters: {
            query?: {
                isActive?: boolean;
                isCompleted?: boolean;
                isApproving?: boolean;
                isDeclined?: boolean;
                isHabit?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskListDto"][];
                };
            };
        };
    };
    TasksController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputCreateTaskDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputCreateTaskDto"];
                };
            };
        };
    };
    TasksController_findTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskDto"];
                };
            };
        };
    };
    TasksController_deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_completeTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_findTasksForApproval: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputTaskDto"][];
                };
            };
        };
    };
    TasksController_updateTaskStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InputEditTaskDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutputUserDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginInputDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListsController_getFeatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureDto"][];
                };
            };
        };
    };
    ListsController_getUserSkills: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillXpDto"][];
                };
            };
        };
    };
    ListsController_getSkills: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SkillListDto"][];
                };
            };
        };
    };
    ListsController_getUserAbilitie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAbilityDto"];
                };
            };
        };
    };
}
